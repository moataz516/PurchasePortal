@using PurchasePortal.Web.Models.DTOs


@* @model CategoryDto *@
@model HomeDto


@{
    ViewData["Title"] = "Home Page";
}
<div class="container my-4">
    @if (User.IsInRole("Admin") && User.Identity.IsAuthenticated)
    {
        <div class="row mb-2">
            <div class="col-md-12 text-end">
                <button type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#addProductModal">
                    Add Product
                </button>
            </div>
        </div>
    }

    <ul class="nav nav-pills mb-3" id="pills-tab" role="tablist">
        @foreach (var cat in Model.CategoriesWithProducts)
        {
            <li class="nav-item" role="presentation">
                <button class="nav-link @(cat == Model.CategoriesWithProducts.First() ? "active" : "")" id="pills-@cat.Name-tab" data-bs-toggle="pill" data-bs-target="#pills-@cat.Name" type="button" role="tab" aria-controls="pills-@cat.Name" aria-selected="@(cat == Model.CategoriesWithProducts.First() ? "true" : "false")">
                    @cat.Name
                </button>
            </li>
        }
    </ul>

    <div class="tab-content" id="pills-tabContent">
        @foreach (var cat in Model.CategoriesWithProducts)
        {
            <div class="tab-pane fade @(cat == Model.CategoriesWithProducts.First() ? "show active" : "")" id="pills-@cat.Name" role="tabpanel" aria-labelledby="pills-@cat.Name-tab" tabindex="0">
                @if (!cat.Products.Any())
                {
                    <div style="height: 325px; max-height: 325px;">
                        <h2>No products available</h2>
                    </div>
                }
                else
                {
                    <div class="slick-carousel" id="slick-carousel-@cat.Id">
                        @foreach (var pro in cat.Products)
                        {
                            @await Html.PartialAsync("_CardPartial", pro)
                        }
                    </div>
                }
            </div>
        }
    </div>
</div>



<div class="container mt-5">
    @foreach (var promotionCategory in Model.PromotionCategories)
    {
        @if (promotionCategory.Products.Any())
        {
            <div class="promotion-category mb-4">
                <h2>@promotionCategory.Name</h2>
                <div class="slick-carousel">
                    @foreach (var pro in promotionCategory.Products)
                    {
                        @await Html.PartialAsync("_CardPartial", pro)
                    }
                </div>
            </div>
        }
    }
</div>






@* @await Html.PartialAsync("_CreateProduct", Model.CreateProduct) *@

@if (User.IsInRole("Admin") && User.Identity.IsAuthenticated)
{

    <!-- Update Product Modal -->
    <div class="modal fade" id="updateProductModal" tabindex="-1" aria-labelledby="updateProductModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
            </div>
        </div>
    </div>


    <!-- delete Product Modal -->
    <div class="modal fade" id="deleteProductModal" tabindex="-1" aria-labelledby="deleteProductModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
            </div>
        </div>
    </div>



    <!-- Add Product Modal -->
    <div class="modal fade" id="addProductModal" tabindex="-1" aria-labelledby="addProductModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">

            </div>
        </div>
    </div>
}


@section Scripts {
    <script type="text/javascript" src="//cdn.jsdelivr.net/npm/slick-carousel@1.8.1/slick/slick.min.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {

        const addProductModal = document.getElementById('addProductModal');

        if (addProductModal) {
            addProductModal.addEventListener('show.bs.modal', function (event) {
                fetch('/GetCreateProductForm')
                    .then(response => response.text())
                    .then(html => {
                        const modalContent = document.querySelector('#addProductModal .modal-content');
                        modalContent.innerHTML = html;
                    })
                    .catch(error => console.error('Error:', error));
            });
        } else {
            console.error('Element with ID "addProductModal" not found.');
        }


            const deleteProductModal = document.getElementById('deleteProductModal');

            if (deleteProductModal) {
                deleteProductModal.addEventListener('show.bs.modal', function (event) {
                    const button = event.relatedTarget; // Button that triggered the modal
                    const productId = button.getAttribute('data-id');
                    fetch('/deleteProduct/' + productId)
                        .then(response => response.text())
                        .then(html => {
                            const modalContent = document.querySelector('#deleteProductModal .modal-content');
                            modalContent.innerHTML = html;
                        })
                        .catch(error => console.error('Error:', error));
                });
            } else {
                console.error('Element with ID "deleteProductModal" not found.');
            }


    function GetProductsBycategory(name) {
        var tt = document.getElementsByClassName("tt");
                fetch('/Pro' + name).then(res => res.text).then(html => {
                tt.innerHTML = html;
        })
    }


  const updateProductModal = document.getElementById('updateProductModal');

    if (updateProductModal) {
        updateProductModal.addEventListener('show.bs.modal', function (event) {
            const button = event.relatedTarget; // Button that triggered the modal
            const productId = button.getAttribute('data-id');

            fetch('/GetProductForUpdate/' + productId)
                .then(response => response.text())
                .then(html => {
                    const modalContent = document.querySelector('#updateProductModal .modal-content');
                    modalContent.innerHTML = html;
                })
                .catch(error => console.error('Error:', error));
        });
    } else {
        console.error('Element with ID "updateProductModal" not found.');
    }

});


        $(document).ready(function () {
            $('.slick-carousel').slick({
                slidesToShow: 4,
                slidesToScroll: 1,
                dots: false,
                infinite: false,
                speed: 300,
                arrows: true,
                prevArrow: '<button type="button" class="slick-prev">&larr;</button>',
                nextArrow: '<button type="button" class="slick-next">&rarr;</button>',
                responsive: [
                    {
                        breakpoint: 1024,
                        settings: {
                            slidesToShow: 3,
                            slidesToScroll: 1,
                        }
                    },
                    {
                        breakpoint: 600,
                        settings: {
                            slidesToShow: 2,
                            slidesToScroll: 1
                        }
                    },
                    {
                        breakpoint: 480,
                        settings: {
                            slidesToShow: 1,
                            slidesToScroll: 1
                        }
                    }
                ]
            });

            // Initialize Slick Carousel when the tab is shown
            $('button[data-bs-toggle="pill"]').on('shown.bs.tab', function (e) {
                $($(e.target).data('bs-target')).find('.slick-carousel').slick('setPosition');
            });
        });

    </script>
}